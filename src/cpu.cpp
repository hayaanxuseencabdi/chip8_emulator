#include "cpu.h"

#include <cstdint>
#include <cstddef>
#include <array>

/**
 * Contains the sprites (in ascending order) CHIP-8 programs could refer to.
 * Each sprite is 5 bytes long. They'll be stored from 0x000 onwards up to 0x50
 * in the memory reserved for the CHIP-8 interpreter (0x000 to 0x1FF). 
 * The sprites represent the possible values of a hexadecimal digit, i.e.
 * {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}.
 */
constexpr std::array<std::uint8_t, 16 * 5> SPRITES {
  0xF0, 0x90, 0x90, 0x90, 0xF0,
  0x20, 0x60, 0x20, 0x20, 0x70,
  0xF0, 0x10, 0xF0, 0x80, 0xF0,
  0xF0, 0x10, 0xF0, 0x10, 0xF0,
  0x90, 0x90, 0xF0, 0x10, 0x10,
  0xF0, 0x80, 0xF0, 0x10, 0xF0,
  0xF0, 0x80, 0xF0, 0x90, 0xF0,
  0xF0, 0x10, 0x20, 0x40, 0x40,
  0xF0, 0x90, 0xF0, 0x90, 0xF0,
  0xF0, 0x90, 0xF0, 0x10, 0xF0,
  0xF0, 0x90, 0xF0, 0x90, 0x90,
  0xE0, 0x90, 0xE0, 0x90, 0xE0,
  0xF0, 0x80, 0x80, 0x80, 0xF0,
  0xE0, 0x90, 0x90, 0x90, 0xE0,
  0xF0, 0x80, 0xF0, 0x80, 0xF0,
  0xF0, 0x80, 0xF0, 0x80, 0x80
};

CPU::CPU() 
  : opcode(0), V(std::array<std::uint8_t, 16> {}), pc(0), I(0),
    mem(std::array<std::uint8_t, 4096> {}), stack_pointer (0), 
    stack(std::array<std::uint16_t, 16> {}), delay_timer(0), sound_timer(0) {
  for (std::size_t idx {0}; idx < 0x50; ++idx) {
    mem[idx] = SPRITES[idx];
  }
}

CPU::~CPU() = default;

void CPU::clock_cycle() {
  
}
